name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: full

jobs:
  # Build and run linter
  build:
    runs-on: ubuntu-latest
    name: Build
    steps:
      - uses: actions/checkout@v3
      - run: cargo build --verbose
      - run: cargo build --features client --verbose
      - run: cargo clippy -- -D warnings

  # Run tests
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    name: Test | ${{ matrix.os }}
    steps:
      # Cache cargo dependencies
      - name: Cache Cargo
        id: cache-test-cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - if: ${{ steps.cache-test-cargo.outputs.cache-hit != 'true' }}
        name: List dependencies
        continue-on-error: true
        run: cargo tree

      # Run actual tests
      - uses: actions/checkout@v3
      - run: cargo test --verbose
      - run: cargo test --features client --verbose
  cli:
    strategy:
      fail-fast: false
      matrix:
        template: ['actix-web', 'axum', 'rocket', 'tide', 'warp', 'deno']
    runs-on: ubuntu-latest
    name: Template (${{ matrix.template }})
    steps:
      # Cache cargo dependencies
      - uses: actions/checkout@v3
      - name: Cache Cargo
        id: cache-cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      # Install and cache binaries
      - name: Install cargo-make
        uses: baptiste0928/cargo-install@v2
        with:
          crate: cargo-make

      - name: Install deno
        uses: baptiste0928/cargo-install@v2
        with:
          crate: deno

      # Install other binaries
      - name: Install binaries
        if: steps.cache-cargo.outputs.cache-hit != 'true'
        run: |
          rustup target add wasm32-unknown-unknown
          cargo install --path ./packages/hashira-cli

      # Create template
      - run: cd examples && hashira new --${{ matrix.template }} --dev --name ${{ matrix.template }}-template

      # Run others
      - name: Build ${{ matrix.template }} template
        if: matrix.template!= 'deno'
        run: cd examples/${{ matrix.template }}-template && hashira build

      # Run deno
      - name: Build ${{ matrix.template }} template
        if: matrix.template == 'deno'
        run: cd examples/${{ matrix.template }}-template && cargo make build